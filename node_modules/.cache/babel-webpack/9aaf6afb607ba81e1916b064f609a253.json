{"ast":null,"code":"import { catchError } from 'rxjs/internal/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FetchApiDataService {\n  constructor() {}\n\n} //Declaring the api url that will provide data for the client app\n\nconst apiUrl = 'https://myflix01025.herokuapp.com/';\nexport let UserRegistrationService = /*#__PURE__*/(() => {\n  class UserRegistrationService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allows to register\r\n     * @param userDetails\r\n     * @returns Request to the database (Endpoint: 'users', Method: POST)\r\n     */\n\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  UserRegistrationService.ɵfac = function UserRegistrationService_Factory(t) {\n    return new (t || UserRegistrationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserRegistrationService,\n    factory: UserRegistrationService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserRegistrationService;\n})();\nexport let UserLoginService = /*#__PURE__*/(() => {\n  class UserLoginService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * User Login\r\n     * @param userDetails\r\n     * @returns Request to the database (Endpoint: 'login', Method: POST)\r\n     */\n\n\n    userLogin(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  UserLoginService.ɵfac = function UserLoginService_Factory(t) {\n    return new (t || UserLoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserLoginService,\n    factory: UserLoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserLoginService;\n})();\nexport let GetAllMoviesService = /*#__PURE__*/(() => {\n  class GetAllMoviesService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allows to get all movies\r\n     * @returns Request to the database (Endpoint: 'movies', Method: GET)\r\n     */\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetAllMoviesService.ɵfac = function GetAllMoviesService_Factory(t) {\n    return new (t || GetAllMoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetAllMoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetAllMoviesService,\n    factory: GetAllMoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetAllMoviesService;\n})();\nexport let GetOneMovieService = /*#__PURE__*/(() => {\n  class GetOneMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allows to get one movie----movies/:title\r\n     * @returns Request to the database (Endpoint: 'movies/:title', Method: GET)\r\n     */\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/:title', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetOneMovieService.ɵfac = function GetOneMovieService_Factory(t) {\n    return new (t || GetOneMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetOneMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetOneMovieService,\n    factory: GetOneMovieService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetOneMovieService;\n})();\nexport let GetDirectorService = /*#__PURE__*/(() => {\n  class GetDirectorService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allow to get director\r\n     * @returns  Request to the database (Endpoint: 'movies/directors/:name', Method: GET)\r\n     */\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/directors/:name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetDirectorService.ɵfac = function GetDirectorService_Factory(t) {\n    return new (t || GetDirectorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetDirectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetDirectorService,\n    factory: GetDirectorService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetDirectorService;\n})();\nexport let GetGenreService = /*#__PURE__*/(() => {\n  class GetGenreService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allow to get genre\r\n     * @returns Request to the database (Endpoint: 'movies/genres/:name', Method: GET)\r\n     */\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/genres/:name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetGenreService.ɵfac = function GetGenreService_Factory(t) {\n    return new (t || GetGenreService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetGenreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetGenreService,\n    factory: GetGenreService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetGenreService;\n})();\nexport let GetUserService = /*#__PURE__*/(() => {\n  class GetUserService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allow to get user info\r\n     * @returns Request to the database (Endpoint: 'users/:username/', Method: GET)\r\n     */\n\n\n    GetUser() {\n      const token = localStorage.getItem('item');\n      return this.http.get(apiUrl + `users/username`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened');\n    }\n\n  }\n\n  GetUserService.ɵfac = function GetUserService_Factory(t) {\n    return new (t || GetUserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetUserService,\n    factory: GetUserService.ɵfac,\n    providedIn: 'root'\n  });\n  return GetUserService;\n})();\nexport let AddMovieService = /*#__PURE__*/(() => {\n  class AddMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allow to add user favorite movie\r\n     * @param _id\r\n     * @returns Request to the database (Endpoint: 'users/:username/movies/:movieId', Method: PUT)\r\n     */\n\n\n    addFavMovie(_id) {\n      const token = localStorage.getItem('item');\n      return this.http.put(apiUrl + `users/:username/movies/:movieId`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened');\n    }\n\n  }\n\n  AddMovieService.ɵfac = function AddMovieService_Factory(t) {\n    return new (t || AddMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AddMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddMovieService,\n    factory: AddMovieService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddMovieService;\n})();\nexport let EditUserService = /*#__PURE__*/(() => {\n  class EditUserService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Alow to edit user data\r\n     * @param userDetails\r\n     * @returns Request to the database (Endpoint: 'users/username', Method: PUT)\r\n     */\n\n\n    EditUserInfo(userDetails) {\n      const token = localStorage.getItem('item');\n      console.log(userDetails);\n      return this.http.put(apiUrl + `users/username`, userDetails, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened');\n    }\n\n  }\n\n  EditUserService.ɵfac = function EditUserService_Factory(t) {\n    return new (t || EditUserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EditUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EditUserService,\n    factory: EditUserService.ɵfac,\n    providedIn: 'root'\n  });\n  return EditUserService;\n})();\nexport let DeleteUserService = /*#__PURE__*/(() => {\n  class DeleteUserService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n    * Allow to delete user\r\n    * @returns Request to the database (Endpoint: 'users/username', Method: DELETE)\r\n    */\n\n\n    Deleteuser() {\n      const token = localStorage.getItem('item');\n      return this.http.delete(apiUrl + `users/:username`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened');\n    }\n\n  }\n\n  DeleteUserService.ɵfac = function DeleteUserService_Factory(t) {\n    return new (t || DeleteUserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DeleteUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeleteUserService,\n    factory: DeleteUserService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeleteUserService;\n})();\nexport let DeleteFavMovieService = /*#__PURE__*/(() => {\n  class DeleteFavMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Allow to delete user favorite movies\r\n     * @param _id\r\n     * @returns Request to the database (Endpoint: 'users/:username/movies/:movieId', Method: DELETE)\r\n     */\n\n\n    DeleteUserFavMovie(_id) {\n      const token = localStorage.getItem('item');\n      return this.http.delete(apiUrl + `users/:username/movies/:movieId`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened');\n    }\n\n  }\n\n  DeleteFavMovieService.ɵfac = function DeleteFavMovieService_Factory(t) {\n    return new (t || DeleteFavMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DeleteFavMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeleteFavMovieService,\n    factory: DeleteFavMovieService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeleteFavMovieService;\n})();","map":null,"metadata":{},"sourceType":"module"}